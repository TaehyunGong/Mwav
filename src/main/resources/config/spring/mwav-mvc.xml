<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="net"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>

	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- CustomMapArgumentResolver는 root context 영역에 등록이 되어야 한다. -->
	<!-- 어노테이션을 사용하겠다고 선언 -->
	<!-- <mvc:argument-resolvers> 태그를 이용하여 우리가 만든 CustomMapArgumentResolver의 
		빈(bean)을 수동으로 등록했다. -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean class="net.common.resolver.CustomMapArgumentResolver"></bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- ContentNegotiatingViewResolver http://ismydream.tistory.com/139 -->
	<bean id="contentNegotiatingResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!--<property name="contentNegotiationManager"> <bean class="org.springframework.web.accept.ContentNegotiationManager"> 
			풀게되면 / 는 media type 아래 타버리면서 안뜬다. <constructor-arg> <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy"> 
			<constructor-arg> <map> <entry key="xls" value="application/vnd.ms-excel" 
			/> <entry key="json" value="application/json" /> <entry key="html" value="text/html" 
			/> <entry key="pdf" value="application/pdf" /> <entry key="xlsx" value="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" 
			/> </map> </constructor-arg> </bean> </constructor-arg> </bean> </property> -->
		<property name="viewResolvers">
			<list>

				<bean id="beanView"
					class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<property name="order" value="1" />
				</bean>

				<!-- tiles org.springframework.web.servlet.view.BeanNameViewResolver 
					org.springframework.web.servlet.view.tiles3.TilesViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver -->
				<bean id="tilesViewResolver"
					class="org.springframework.web.servlet.view.UrlBasedViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.tiles3.TilesView" />
					<property name="order" value="2" />
				</bean>

				<bean id="jspView"
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp -->
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="order" value="3" />
					<property name="prefix" value="/" />
					<property name="suffix" value=".jsp" />
					<!-- <property name="contentType" value="text/html; charset=UTF-8" /> -->
				</bean>
			</list>
		</property>
		<!-- <property name="defaultViews"> <list> <bean id="excelView" class="" 
			/> <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
			/> <bean id="pdfView" class="" /> </list> </property> -->
	</bean>
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/tiles.xml</value>
			</list>
		</property>
	</bean>



    <!-- 위와 같이 리졸버랑 같이있어야 인터셉터 적용되는듯  -->
	<!-- @RequestMapping 어노테이션을 이용하여 컨트롤러와 매핑한다. DefaultAnnotationHandlerMapping은 
		URL 단위로 interceptor를 적용할 수 없는 듯 체크 필요! [이슈확인 필요] >https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte:ptl:handlermapping 
		SimpleUrlAnnotationHandlerMapping은 @Controller 사용시에 url 단위로 Interceptor를 
		적용하기 위해 개발됬다. 비슷한 고민과 비슷한 해결 방법을 제시한 분이 있다. Scott Murphy의 블로그를 참고하라. -->
<!-- 	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
 -->


	<!-- Interceptor는 Controller가 요청되기 전에 수행된다. 즉, Interceptor는 DispatcherServlet과 
		같은 위치에 등록이 되어있어야지 정상적으로 수행이 된다. -->
	<!-- Log4js 설정 http://dev.anyframejava.org/docs/anyframe/plugin/essential/core/1.6.0/reference/html/ch21.html 
		http://logging.apache.org/log4j/1.2/apidocs/index.html -->
	<!-- 20160223 admin 권한부여를 위하여 변경 <mvc:interceptors> <mvc:interceptor> <mvc:mapping 
		path="/**" /> 지금 작성하는 로거는 모든 요청에서 동작을 하기때문에 전체 패스를 의미하는 "/**" 로 설정하였다. <bean 
		id="loggerInterceptor" class="net.common.logger.LoggerInterceptor"></bean> 
		</mvc:interceptor> </mvc:interceptors> <mvc:mapping path="/admins/**" /> -->
	<!-- 제외하고 싶을떄 http://krespo.net/192 -->
	<!-- 여러개 쓸때 http://kdsr2z0.github.io/spring_interceptor/ (순서대로실행) -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean id="loggerInterceptor" class="net.common.Interceptor.StatisticsInterceptor">
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean id="authInterceptor" class="net.common.Interceptor.AuthInterceptor">
				<property name="urls">
					<list>
						<value>/CustomerService/MemberShip/MemberShip.mwav</value>
						<value>/CustomerService/MyPage/MyPage.mwav</value>						
						<value>/logout/logout.do</value>
						<value>/login.do</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
				<mvc:interceptor>
			<mvc:mapping path="/login/post" />
			<!--<mvc:mapping path="/member/**" /> -->
			<bean id="loginInterceptor" class="net.common.Interceptor.LoginInterceptor">
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/signin/linkedin.mwav" />
			<mvc:mapping path="/signin/google.mwav" />
			<mvc:mapping path="/signin/twitter.mwav" />
			<mvc:mapping path="/signin/facebook.mwav" />
			<!--<mvc:mapping path="/member/**" /> -->
			<bean id="autoLoginInterceptor" class="net.common.Interceptor.AutoLoginInterceptor">
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>